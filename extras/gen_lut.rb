#!/usr/bin/ruby

class TableGen
  def mult(d, e)
    # Multiplication of d and e,
    # Refer 4.2 of AES standard document "fips-197.pdf"
    x = 0
    8.times do |i|
      x <<= 1
      x ^= 283 if (x & 256) != 0
      x ^= d if (e & (128 >> i)) != 0
    end
    return x
  end

  def initialize
    print <<"HEADEREND"
#ifdef WORDS_BIGENDIAN
#define PACK(a, b, c, d) ((a) << 24) | ((b) << 16) | ((c) << 8) | (d)
#else
#define PACK(a, b, c, d) ((d) << 24) | ((c) << 16) | ((b) << 8) | (a)
#endif

/** This table is generated by Ruby scripyt "".
 */
static const uint32_t inv_mult[256] = {
HEADEREND

    (0...(4 / 2)).each do |row|
      i0 = row * 4
      $stdout.printf("\t")
      2.times do |j|
        $stdout.printf("PACK(0x%02x, 0x%02x, 0x%02x, 0x%02x),%s", mult(i0 + j, 0xe), mult(i0 + j, 0xb), mult(i0 + j, 0xd), mult(i0 + j, 0x9), j ? ' ' : '\n')
      end
      $stdout.print "\n"
=begin
      $stdout.printf("\tPACK(0x%02x, 0x%02x, 0x%02x, 0x%02x), PACK(0x%02x, 0x%02x, 0x%02x, 0x%02x),\n\tPACK(0x%02x, 0x%02x, 0x%02x, 0x%02x), PACK(0x%02x, 0x%02x, 0x%02x, 0x%02x),\n",
      mult(i0, 0xe), mult(i0, 0xb), mult(i0, 0xd), mult(i0, 0x9),
      mult(i0 + 1, 0xe), mult(i0 + 1, 0xb), mult(i0 + 1, 0xd), mult(i0 + 1, 0x9),
      mult(i0 + 2, 0xe), mult(i0 + 2, 0xb), mult(i0 + 2, 0xd), mult(i0 + 2, 0x9),
      mult(i0 + 3, 0xe), mult(i0 + 3, 0xb), mult(i0 + 3, 0xd), mult(i0 + 3, 0x9))
=end
    end
    $stdout.print '};'
  end
end

TableGen.new
